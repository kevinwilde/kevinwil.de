{"data":{"site":{"siteMetadata":{"title":"Kevin Wilde","author":"Kevin Wilde"}},"markdownRemark":{"id":"d1b82fea-87d8-5957-9497-3234feb86547","excerpt":"Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately…","html":"<p>Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately define the type of such a component in TypeScript so that users of the component are guided to correct usage and so that you don’t need to include defensive checks within the component.</p>\n<p>Suppose your company has a Dropdown component that has an <code class=\"language-text\">items</code> prop of type <code class=\"language-text\">string[]</code>. This component is used in many, many places across your site. However, you have recently been asked to implement a new feature which includes a fancy dropdown where each item has a bolded title, with a subtitle underneath, and an image to the left.</p>\n<p>After thinking about this new design, you have decided that the <code class=\"language-text\">items</code> prop should actually be an array of objects and there should be another prop that takes one of those objects and renders it. At this point, there are of course several options for how you might proceed. You might fork the dropdown implementation and make a new component with the new type for <code class=\"language-text\">items</code> and the new <code class=\"language-text\">renderItem</code> prop. You might change the Dropdown component directly and convert all usages of the Dropdown component to use the new API. Or you might decide that the Dropdown component should support either usage. The right decision will depend on your situation, but let’s suppose you want to support either usage.</p>\n<p>In order to do so, you change the type of the Dropdown component’s props as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To elimate the <code class=\"language-text\">any</code>, you use a generic:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, you realize you can simplify this further to:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  <span class=\"token comment\">// if you pass a string[], TypeScript will infer that</span>\n  <span class=\"token comment\">// T = string so we can remove the union with string[]</span>\n  items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a nice, clean interface, and it satisfies both use cases without producing a type error. You push this into production and move onto the next task. However, about a month later, a coworker approaches you and says they are struggling to get the Dropdown working. They are passing an array of objects for the items but have forgotten to pass the <code class=\"language-text\">renderItem</code> prop. After helping them out, you add a warning in the Dropdown component that detects when the items are objects, and warns that the <code class=\"language-text\">renderItem</code> prop should also be passed.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span>\n  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>renderItem\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"renderItem props is required when items prop is not a string[]\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But the next week someone else approaches you and says they find the Dropdown component awkward to use. When you ask why, they show you that they have a very simple use case where they are passing an array of strings for the items, but also passing the <code class=\"language-text\">renderItem</code> prop, which is simply <code class=\"language-text\">(s) =&gt; s</code> since they just want to display those strings. When you point out that they don’t need to pass the <code class=\"language-text\">renderItem</code> prop, they blush and mention they didn’t realize this because they found some place in the codebase that was using the Dropdown component with the <code class=\"language-text\">renderItem</code> prop, and they had modelled their code after this usage.</p>\n<p>Given that multiple people have now had an issue using the Dropdown component, you take a step back to think about whether you could define the type in such a way that this sort of confusion is elimated. Your type had seemed so simple and elegant, but as you think about it, you realize that it doesn’t actually describe the use cases you had laid out in an accurate way.</p>\n<p>The way the Dropdown component is implemented requires the <code class=\"language-text\">renderItem</code> prop when <code class=\"language-text\">items</code> is an array of anything other than strings, and it ignores the <code class=\"language-text\">renderItem</code> prop when <code class=\"language-text\">items</code> is an array of strings. (You could implement this in a different way so that you can still have a custom way of rendering items even they are an array of strings, but let’s stick with this implementation for the sake of the story.)</p>\n<p>However, the type of Dropdown doesn’t convey this. The type simply states that <code class=\"language-text\">items</code> is required and is of type <code class=\"language-text\">T[]</code> for some <code class=\"language-text\">T</code>, and <code class=\"language-text\">renderItem</code> is optional and is of <code class=\"language-text\">(item: T) =&gt; React.ReactNode</code>. Thus, passing an array of objects without passing <code class=\"language-text\">renderItem</code> satisfies the type, and passing an array of strings while passing <code class=\"language-text\">renderItem</code> also satisfies the type.</p>\n<p>A more accurate way to define the type is:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function-variable function\">renderItem</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>chakra ui accordion\nisExpanded/toggleExpand</p>","frontmatter":{"title":"Enforcing Correlated React Component Props with TypeScript","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/enforcing-correlated-react-component-props-with-typescript/","previous":{"fields":{"slug":"/differences-in-output-of-typescript-compiler-and-babel-for-classes/"},"frontmatter":{"title":"Differences in output of Typescript compiler and Babel for classes"}},"next":null}}