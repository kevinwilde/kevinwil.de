{"data":{"site":{"siteMetadata":{"title":"Kevin Wilde","author":"Kevin Wilde"}},"markdownRemark":{"id":"d1b82fea-87d8-5957-9497-3234feb86547","excerpt":"Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately…","html":"<p>Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately define the type of such a component in TypeScript so that users of the component are guided to correct usage and so that you don’t need to include defensive checks within the component.</p>\n<p>Suppose your company has a Dropdown component that has an <code class=\"language-text\">items</code> prop of type <code class=\"language-text\">string[]</code>. This component is used in many, many places across your site. However, you have recently been asked to implement a new feature which includes a fancy dropdown where each item has a bolded title, with a subtitle underneath, and an image to the left.</p>\n<p>After thinking about this new design, you have decided that the <code class=\"language-text\">items</code> prop should actually be an array of objects and there should be another prop that takes one of those objects and renders it. At this point, there are of course several options for how you might proceed. You might fork the dropdown implementation and make a new component with the new type for <code class=\"language-text\">items</code> and the new <code class=\"language-text\">renderItem</code> prop. You might change the Dropdown component directly and convert all usages of the Dropdown component to use the new API. Or you might decide that the Dropdown component should support either usage. The right decision will depend on your situation, but let’s suppose you want to support either usage.</p>\n<p>In order to do so, you change the type of the Dropdown component’s props as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To elimate the <code class=\"language-text\">any</code>, you use a generic:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and then simplify this further to</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>chakra ui accordion\nisExpanded/toggleExpand</p>","frontmatter":{"title":"Enforcing Correlated React Component Props with TypeScript","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/enforcing-correlated-react-component-props-with-typescript/","previous":{"fields":{"slug":"/differences-in-output-of-typescript-compiler-and-babel-for-classes/"},"frontmatter":{"title":"Differences in output of Typescript compiler and Babel for classes"}},"next":null}}