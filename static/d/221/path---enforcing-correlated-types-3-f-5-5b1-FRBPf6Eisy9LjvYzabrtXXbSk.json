{"data":{"site":{"siteMetadata":{"title":"Kevin Wilde","author":"Kevin Wilde"}},"markdownRemark":{"id":"93da607f-1a95-515c-b703-1e4666fb3a0d","excerpt":"Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately…","html":"<p>Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately define the type of such a component in TypeScript so that users of the component are guided to correct usage and so that you don’t need to include defensive checks within the component.</p>\n<h2>Example</h2>\n<p>Suppose your company has a Dropdown component that has an <code class=\"language-text\">items</code> prop of type <code class=\"language-text\">string[]</code>. This component is used in many, many places across your site. However, you have recently been asked to implement a new feature which includes a fancy dropdown where each item has a bolded title, with a subtitle underneath, and an image to the left.</p>\n<p>After thinking about this new design, you have decided that the <code class=\"language-text\">items</code> prop should actually be an array of objects and there should be another prop that takes one of those objects and renders it. At this point, there are of course several options for how you might proceed. You might fork the dropdown implementation and make a new component with the new type for <code class=\"language-text\">items</code> and the new <code class=\"language-text\">renderItem</code> prop. You might change the Dropdown component directly and convert all usages of the Dropdown component to use the new API. Or you might decide that the Dropdown component should support either usage. The right decision will depend on your situation, but let’s suppose you want to support either usage.</p>\n<p>In order to do so, you change the type of the Dropdown component’s props as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To elimate the <code class=\"language-text\">any</code>, you use a generic:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, you realize you can simplify this further to:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  <span class=\"token comment\">// if you pass a string[], TypeScript will infer that</span>\n  <span class=\"token comment\">// T = string so we can remove the union with string[]</span>\n  items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a nice, clean interface, and it satisfies both use cases without producing a type error. You push this into production and move onto the next task. However, about a month later, a coworker approaches you and says they are struggling to get the Dropdown working. They are passing an array of objects for the items but have forgotten to pass the <code class=\"language-text\">renderItem</code> prop. After helping them out, you add a warning in the Dropdown component that detects when the items are objects, and warns that the <code class=\"language-text\">renderItem</code> prop should also be passed.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span>\n  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>renderItem\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"renderItem props is required when items prop is not a string[]\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But the next week someone else approaches you and says they find the Dropdown component awkward to use. When you ask why, they show you that they have a very simple use case where they are passing an array of strings for the items, but also passing the <code class=\"language-text\">renderItem</code> prop, which is simply <code class=\"language-text\">(s) =&gt; s</code> since they just want to display those strings. When you point out that they don’t need to pass the <code class=\"language-text\">renderItem</code> prop, they blush and mention they didn’t realize this because they found some place in the codebase that was using the Dropdown component with the <code class=\"language-text\">renderItem</code> prop, and they had modelled their code after this usage.</p>\n<p>Given that multiple people have now had an issue using the Dropdown component, you take a step back to think about whether you could define the type in such a way that this sort of confusion is elimated. Your type had seemed so simple and elegant, but as you think about it, you realize that it doesn’t actually describe the use cases you had laid out in an accurate way.</p>\n<p>The way the Dropdown component is implemented requires the <code class=\"language-text\">renderItem</code> prop when <code class=\"language-text\">items</code> is an array of anything other than strings, and it ignores the <code class=\"language-text\">renderItem</code> prop when <code class=\"language-text\">items</code> is an array of strings. (You could implement this in a different way so that you can still have a custom way of rendering items even they are an array of strings, but let’s stick with this implementation for the sake of the story.)</p>\n<p>However, the type of Dropdown doesn’t convey this. The type simply states that <code class=\"language-text\">items</code> is required and is of type <code class=\"language-text\">T[]</code> for some <code class=\"language-text\">T</code>, and <code class=\"language-text\">renderItem</code> is optional and is of <code class=\"language-text\">(item: T) =&gt; React.ReactNode</code>. Thus, passing an array of objects without passing <code class=\"language-text\">renderItem</code> satisfies the type, and passing an array of strings while passing <code class=\"language-text\">renderItem</code> also satisfies the type.</p>\n<p>A more accurate way to define the type is:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token function-variable function\">renderItem</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This accurately conveys that when items is of type <code class=\"language-text\">string[]</code> you should not pass <code class=\"language-text\">renderItem</code>, but when items is an array of objects, <code class=\"language-text\">renderItem</code> is required. You will get a type error if you leave it off.</p>\n<p>With this type definition, there is less confusion about how to use these props and you can even remove the defensive check you added previously to warn that the <code class=\"language-text\">renderItem</code> prop should be passed when <code class=\"language-text\">items</code> is not an array of strings because TypeScript will enforce this for you.</p>\n<p>Finally, one minor point that arises with the above type definition is that it can be slightly annoying to access the <code class=\"language-text\">renderItem</code> prop. Before accessing it, you must convince TypeScript that you are in the case where the <code class=\"language-text\">renderItem</code> prop exists.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> Dropdown<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Type error: Property 'renderItem' does not exist on type 'Props&lt;T>'.</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>renderItem\n\n  <span class=\"token comment\">// Using destructuring doesn't change anything. Still the same error</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> renderItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token comment\">// Can't even check this way. Still the same error</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>renderItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>render\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// This works, but mildly annoying</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'renderItem'</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No type error</span>\n    <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>renderItem\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One way to get around this while not affecting how the component can be used is to add an optional <code class=\"language-text\">renderItem</code> prop of type <code class=\"language-text\">undefined</code> in the case where <code class=\"language-text\">items</code> is of type <code class=\"language-text\">string[]</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      renderItem<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> undefined\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token function-variable function\">renderItem</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span>ReactNode\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, property <code class=\"language-text\">renderItem</code> always exists on type <code class=\"language-text\">Props&lt;T&gt;</code>, but users still cannot pass anything for it when items is a string array. It simply allows your code within the Dropdown component to be a little cleaner.</p>\n<h2>Other examples</h2>\n<p><a href=\"https://chakra-ui.com/\">Chakra UI</a> — an excellent React component library — contains an Accordion component that supports an <code class=\"language-text\">allowMultiple</code> prop. They <a href=\"https://chakra-ui.com/accordion#expand-multiple-items-at-once\">describe</a> the usage of this prop in their documentation as follows:</p>\n<blockquote>\n<p>If you set <code class=\"language-text\">allowMultiple</code> to true then the accordion will permit multiple items to be expanded at once.</p>\n</blockquote>\n<blockquote>\n<p>If you pass this prop, ensure that the index or defaultIndex prop is an array.</p>\n</blockquote>\n<p>However the type definition for Accordion’s props contains</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">allowMultiple<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\nindex<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ndefaultIndex<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Based on this description, we could write a more accurate type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      allowMultiple<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      index<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n      defaultIndex<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      allowMultiple<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n      index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      defaultIndex<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In fact, I would guess that even further, one should not pass both <code class=\"language-text\">index</code> and <code class=\"language-text\">defaultIndex</code>. We could define this as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> allowMultiple<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> defaultIndex<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> allowMultiple<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> defaultIndex<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A separate example which I found in the Course Hero codebase involved a rich text editor which was used in multiple places across the product. In general, it was basically used as a feature-rich textarea, but in one place, it was used within a sidebar and supported an expand/collapse functionality. The type defintion for the component’s props included:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n  <span class=\"token comment\">// If isExpanded is passed, you should also pass toggleExpand</span>\n  isExpanded<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n  toggleExpand<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While the comment is helpful, we can do better by actually enforcing this requirement through the type definition in a similar way as the previous examples.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      isExpanded<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n      <span class=\"token function-variable function\">toggleExpand</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Or, if we want to avoid the annoying <code class=\"language-text\">&#39;isExpanded&#39; in props</code> type of checks described above:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">...</span>other props<span class=\"token operator\">...</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      isExpanded<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> undefined\n      toggleExpand<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> undefined\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      isExpanded<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n      <span class=\"token function-variable function\">toggleExpand</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Final thoughts</h2>\n<p>In the Dropdown example above, the usage of <code class=\"language-text\">items</code> and <code class=\"language-text\">renderItem</code> was probably fairly clear even with the inferior type definition. The examples of coworkers being baffled about how to use the component may have seemed a bit unrealistic since it wouldn’t take much effort to figure out how those two props should be used. However, this was a simple example to illustrate the more general pattern which can be applied in cases where there is some relationship between two (or more) props that may not be so obvious.</p>\n<p>I would also mention that although this article framed this problem in terms of correlated React component props, it applies generally to function arguments, struct definitions, etc. Anytime you have multiple arguments/properties/fields that have some relationship to each other, you should think about how to accurately define their type such that that relationship is included in the type definition.</p>","frontmatter":{"title":"Enforcing Correlated Types","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/enforcing-correlated-types/","previous":{"fields":{"slug":"/differences-in-output-of-typescript-compiler-and-babel-for-classes/"},"frontmatter":{"title":"Differences in output of Typescript compiler and Babel for classes"}},"next":null}}