{"data":{"site":{"siteMetadata":{"title":"Kevin Wilde","author":"Kevin Wilde"}},"markdownRemark":{"id":"d1b82fea-87d8-5957-9497-3234feb86547","excerpt":"Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately…","html":"<p>Occasionally, when creating a React component you have some subset of props that are correlated with each other. This article will explore how to accurately define the type of such a component in TypeScript so that users of the component are guided to correct usage and so that you don’t need to include defensive checks within the component.</p>\n<p>For example, you might have a dropdown component that takes an array of items which can either be strings or objects, but if they’re objects, you should also pass a function that will be called to render each item. Perhaps you are doing this because the dropdown was originally implemented to accept an array of strings, but now you need a fancier dropdown where the items each have a title, subtitle, and icon</p>\n<p>chakra ui accordion\nisExpanded/toggleExpand</p>","frontmatter":{"title":"Enforcing Correlated React Component Props with TypeScript","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/enforcing-correlated-react-component-props-with-typescript/","previous":{"fields":{"slug":"/differences-in-output-of-typescript-compiler-and-babel-for-classes/"},"frontmatter":{"title":"Differences in output of Typescript compiler and Babel for classes"}},"next":null}}