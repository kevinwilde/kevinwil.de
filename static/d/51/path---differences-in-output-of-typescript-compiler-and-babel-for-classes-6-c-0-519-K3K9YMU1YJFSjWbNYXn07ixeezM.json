{"data":{"site":{"siteMetadata":{"title":"Kevin Wilde","author":"Kevin Wilde"}},"markdownRemark":{"id":"6ecd6bd8-b597-5438-8588-a04feb5452b4","excerpt":"Recently, I worked on switching our entire frontend codebase from using ts-loader to use babel-loader. In doing so, I ran into some discrepancies in the…","html":"<p>Recently, I worked on switching our entire frontend codebase from using ts-loader to use babel-loader. In doing so, I ran into some discrepancies in the compiled output of classes using the Typescript compiler vs. Babel.</p>\n<h2>Background</h2>\n<p>Originally (before my time) at Course Hero, we were building our react apps using both ts-loader and babel-loader. ts-loader would compile Typescript to ES6, then babel-loader would transpile ES6 to ES5. However, since the Typescript compiler can target es6 directly, we chose to remove babel from the build process so that we were just using ts-loader. This was simpler and also improved the speed of our builds.</p>\n<p>Not long after this, though, @babel/preset-typescript was released, and it became very easy to compile Typescript to Javascript with Babel. We continued to use ts-loader for some time because it was working well for us and we didn’t have a compelling reason to use Babel instead. That changed when I saw <a href=\"https://twitter.com/dan_abramov/status/1144630328142831616\">react-refresh</a>.</p>\n<p>Switching from ts-loader to babel-loader is pretty straightforward for the most part — swap out ts-loader with babel-loader in the webpack config. However, there are a couple things to be aware of. <a href=\"https://devblogs.microsoft.com/typescript/typescript-and-babel-7/\">Microsoft’s blog post</a> about using Typescript and Babel 7 points out that namespaces and const enums don’t work with Babel. I also saw this mentioned in several other articles. If you’re worried about this, I wouldn’t be. A PM on the Typescript team <a href=\"https://github.com/facebook/create-react-app/pull/4837#issuecomment-430107471\">explained why it’s no big deal here</a>.</p>\n<p>However, there were two other surprising differences that I ran into. These were more difficult to debug because, unlike the examples above, Babel will successfully compile the code. But the output is noticably different than that of the Typescript compiler.</p>\n<h2>1. Enumerability of class methods</h2>\n<p>When Typescript compiles classes, it marks class methods enumerable. This is not in line with the spec for ES6 classes, which says that class methods should be non-enumerable. When compiling typescript code with Babel, class methods are marked non-enumerable.\nSome reasoning for why the Typescript compiler marks the methods as enumerable is provided in <a href=\"https://github.com/microsoft/TypeScript/issues/782\">this GitHub issue</a>.</p>\n<h3>Ways to preserve existing behavior</h3>\n<ul>\n<li>Use class properties instead of class methods</li>\n</ul>\n<p>This is a good option if it’s easier for you to change all the necessary classes than to change all the usages that would be affected by enumerability of methods.</p>\n<p>Before:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">myMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>getOwnPropertyNames</li>\n</ul>\n<p>This is a good option if it’s easier for you to change the places that would be affected by enumerability of methods than to change the classes that have those methods.</p>\n<p>Before:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">in</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2. Uninitialized class properties</h2>\n<p>When Typescript compiles classes, it doesn’t generate any code for uninitialized class properties.</p>\n<p>Input:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplicitlyUndefinedProperties</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> ImplicitlyUndefinedProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ImplicitlyUndefinedProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ImplicitlyUndefinedProperties<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is inconsistent with the spec for ES6 classes, which says that these properties should be initialized as undefined. Babel does this correctly. You can imagine that the code Typescript generates is like</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and the code generated by Babel is like</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property1 <span class=\"token operator\">=</span> undefined\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property2 <span class=\"token operator\">=</span> undefined\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This was an issue for us because we had some classes that extended a base class whose constructor looked like</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The subclasses were then used as</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// obj.a === 1 is expected to be true</span></code></pre></div>\n<p>The code relied on the base class to copy any properties passed into the constructor onto the instance of the class.</p>\n<p>Related GitHub issues:</p>\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/12437\">https://github.com/microsoft/TypeScript/issues/12437</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/28823\">https://github.com/microsoft/TypeScript/issues/28823</a></li>\n</ul>\n<h3>Ways to preserve existing behavior</h3>\n<ul>\n<li>Add a constructor to all subclasses</li>\n</ul>\n<p>The benefit of this approach is that you do not need to change the way these classes are used and (at least in our case) it was easy to accomplish by a global find and replace.</p>\n<ul>\n<li>Initialize properties to themselves</li>\n</ul>\n<p>Similar to the solution above, this approach does not require you to change the way these classes are used.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseObject</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Static create method in base class instead of constructor</li>\n</ul>\n<p>The benefit of this approach is that you will not need to change the subclasses. The downside is that you will need to change each place that instantiates a subclass.</p>\n<p>This is a good option if it’s easy to find all places where the constructor of the class is called because it will need to be replaced with a call to this static method.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// and used as...</span>\nMyObject<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'test'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Differences in output of Typescript compiler and Babel for classes","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/differences-in-output-of-typescript-compiler-and-babel-for-classes/","previous":{"fields":{"slug":"/incremental-migration/"},"frontmatter":{"title":"Incremental Migration"}},"next":null}}